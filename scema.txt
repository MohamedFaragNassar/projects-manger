
/* const userType  = new GraphQLObjectType ({
    name:"userType",
    fields:()=>({
        _id:{type:GraphQLString},
        userName:{type:GraphQLString},
        fullName:{type:GraphQLString},
        email:{type:GraphQLString},
        image:{type:GraphQLString},
        favorites:new GraphQLList({type:GraphQLString}),
        createdAt:{type:GraphQLString},
    })
   
})


const changePassword = new GraphQLObjectType ({
    name:"changePassword",
    fields:()=>({
        id:{type:GraphQLString},
        userName:{type:GraphQLString},
        fullName:{type:GraphQLString},
        email:{type:GraphQLString},
        token:{type:GraphQLString}
    })
})


const userInput = new GraphQLInputObjectType ({
    name:"userInput",
    fields:()=>({
        _id:{type:GraphQLString},
        userName:{type:GraphQLString},
        fullName:{type:GraphQLString},
        email:{type:GraphQLString},
        image:{type:GraphQLString},
        favorites:new GraphQLList({type:GraphQLString})
    })
})


const projectType = new GraphQLObjectType({
   name:"projectType",
   fields:()=>({
       _id:{type:GraphQLString},
       name:{type:GraphQLString},
       buckets:new GraphQLList({type:GraphQLString}),
       tasks:new GraphQLList({type:taskType}),
       owner:{type:userType},
       group:new GraphQLList({type:userType}),
       createdAt:{type:GraphQLString},

   })
})


const taskType = new GraphQLObjectType ({
    name:"taskType",
    fields:()=>({
        _id:{type:GraphQLString},
        name:{type:GraphQLString},
        start:{type:GraphQLString},
        end:{type:GraphQLString},
        totalEffort:{type:GraphQLInt},
        doneEffort:{type:GraphQLInt},
        dependants : new GraphQLList({
            type:taskType,
            resolve(args,parent){

            }
        }),
        dependsOn: new GraphQLList({
            type:taskType,
            resolve(args,parent){

            }
        }),
        assignedTo:new GraphQLList({type:userType}),
        project:{type:projectType},
        bucket:{type:GraphQLString},
        completion:{type:GraphQLInt},
    })
})

const taskInput = new GraphQLInputObjectType({
    name:"taskInput",
    fields:()=>({
        _id:{type:GraphQLString},
        name:{type:GraphQLString},
        start:{type:GraphQLString},
        end:{type:GraphQLString},
        totalEffort:{type:GraphQLInt},
        doneEffort:{type:GraphQLInt},
        dependants : new GraphQLList({
            type:taskType,
            resolve(args,parent){

            }
        }),
        dependsOn: new GraphQLList({
            type:taskType,
            resolve(args,parent){

            }
        }),
        assignedTo:new GraphQLList({type:userType}),
        project:{type:projectType},
        bucket:{type:GraphQLString},
        completion:{type:GraphQLInt},
    })
}) 


const allProjects = new GraphQLObjectType ({
    name:"allProjects",
    fields:()=>({
        myProjects: new GraphQLList({type:projectType}),
        sharedProjects: new GraphQLList({type:projectType}),
        favorites :new GraphQLList({type:projectType}),
    })
})

const profileInfo = new GraphQLObjectType ({
    name:"profileInfo",
    fields:()=>({
        user:{type:userType},
        createdProjects:{type:GraphQLInt},
        sharedProjects:{type:GraphQLInt}
    })
})

const RootQuery = new GraphQLObjectType({
    name: 'RootQueryType',
    fields: {
        projects:{
            type:allProjects,
            resolve(parent,args,{user}){
                return projects(user)
            }
        }
    }

})

const Mutation = new GraphQLObjectType({
    name: 'Mutation',
    fields: {
    
    }

}) */
